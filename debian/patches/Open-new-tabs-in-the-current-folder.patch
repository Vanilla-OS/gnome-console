From: Sergio Costas Rodriguez <sergio.costas@canonical.com>
Date: Mon, 1 Aug 2022 10:36:42 +0200
Subject: [PATCH] Open new tabs in the current folder

Currently, each new tab is opened in the $HOME folder (or in the
folder where the first instance of kgx was launched).

Although all the piping is already in place to allow to open each
new tab in the same folder than the current one, the problem is
that VTE neither returns the current folder's URI, nor emits a
signal when the user changed the current folder.

This is because VTE requires some help from the shell in order to
know in which folder it is at each moment. The shell must emit the
string each time the current folder changes or is set.

    \ESC]6;CURRENT_FOLDER_URI\BELL

This can be achieved by setting PROMPT_COMMAND environment
variable, like in https://gitlab.gnome.org/GNOME/console/-/merge_requests/98,
but it has the problem of being compatible only with BASH.

This MR, instead, achieves this by reading the CWD path in /proc.
This is a trick used in Debian to allow to do this same thing in
Gnome Terminal, as seen in:

https://salsa.debian.org/gnome-team/gnome-terminal/-/blob/debian/master/debian/patches/Provide-fallback-for-reading-current-directory-if-OS.patch

The problem is that there is no way of detecting a change in
the file (a GFileMonitor doesn't seem work), so it requires
changes in order to read the path in the precise moment that
a new page is created.

https://gitlab.gnome.org/GNOME/console/-/merge_requests/99
---
 src/kgx-pages.c      | 21 +++++++++++++++
 src/kgx-pages.h      |  2 ++
 src/kgx-simple-tab.c | 13 ++++++++++
 src/kgx-simple-tab.h |  1 +
 src/kgx-terminal.c   | 73 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/kgx-terminal.h   |  3 +++
 src/kgx-window.c     |  7 ++++-
 7 files changed, 119 insertions(+), 1 deletion(-)

diff --git a/src/kgx-pages.c b/src/kgx-pages.c
index ee6d868..53fe5be 100644
--- a/src/kgx-pages.c
+++ b/src/kgx-pages.c
@@ -24,6 +24,7 @@
 #include "kgx-pages.h"
 #include "kgx-tab.h"
 #include "kgx-settings.h"
+#include "kgx-simple-tab.h"
 #include "kgx-marshals.h"
 
 
@@ -932,3 +933,23 @@ kgx_pages_get_selected_page (KgxPages  *self)
 
   return adw_tab_view_get_selected_page (ADW_TAB_VIEW (priv->view));
 }
+
+
+
+GFile *
+kgx_pages_get_current_path (KgxPages *self)
+{
+  KgxPagesPrivate *priv;
+  AdwTabPage *current_page;
+  KgxTab *tab;
+
+  g_return_val_if_fail (KGX_IS_PAGES (self), NULL);
+
+  priv = kgx_pages_get_instance_private (self);
+  current_page = priv->action_page;
+
+  if (!current_page)
+    current_page = adw_tab_view_get_selected_page (ADW_TAB_VIEW (priv->view));
+  tab = (KGX_TAB (adw_tab_page_get_child (ADW_TAB_PAGE (current_page))));
+  return kgx_simple_tab_get_current_path (KGX_SIMPLE_TAB (tab));
+}
diff --git a/src/kgx-pages.h b/src/kgx-pages.h
index 05a8afe..4eb5aee 100644
--- a/src/kgx-pages.h
+++ b/src/kgx-pages.h
@@ -51,4 +51,6 @@ void        kgx_pages_close_page          (KgxPages  *self);
 void        kgx_pages_detach_page         (KgxPages  *self);
 AdwTabPage *kgx_pages_get_selected_page   (KgxPages  *self);
 
+GFile      *kgx_pages_get_current_path    (KgxPages  *self);
+
 G_END_DECLS
diff --git a/src/kgx-simple-tab.c b/src/kgx-simple-tab.c
index aca596c..d90c577 100644
--- a/src/kgx-simple-tab.c
+++ b/src/kgx-simple-tab.c
@@ -233,6 +233,7 @@ spawned (VtePty       *pty,
   }
 
   wait_data = g_new0 (WaitData, 1);
+  kgx_terminal_set_pid (KGX_TERMINAL (start_data->self->terminal), pid);
   g_set_weak_pointer (&wait_data->self, start_data->self);
 
   g_child_watch_add (pid, wait_cb, g_steal_pointer (&wait_data));
@@ -374,3 +375,15 @@ kgx_simple_tab_init (KgxSimpleTab *self)
 {
   gtk_widget_init_template (GTK_WIDGET (self));
 }
+
+GFile *
+kgx_simple_tab_get_current_path (KgxSimpleTab *self)
+{
+  GFile *current_path;
+  g_return_val_if_fail (KGX_IS_SIMPLE_TAB (self), NULL);
+
+  g_object_get (G_OBJECT (self->terminal),
+                "path",  &current_path,
+                NULL);
+  return current_path;
+}
diff --git a/src/kgx-simple-tab.h b/src/kgx-simple-tab.h
index b4dac7c..9b909ce 100644
--- a/src/kgx-simple-tab.h
+++ b/src/kgx-simple-tab.h
@@ -26,5 +26,6 @@ G_BEGIN_DECLS
 
 G_DECLARE_FINAL_TYPE (KgxSimpleTab, kgx_simple_tab, KGX, SIMPLE_TAB, KgxTab)
 
+GFile *kgx_simple_tab_get_current_path (KgxSimpleTab *self);
 
 G_END_DECLS
diff --git a/src/kgx-terminal.c b/src/kgx-terminal.c
index 9056ad8..233abb1 100644
--- a/src/kgx-terminal.c
+++ b/src/kgx-terminal.c
@@ -32,6 +32,7 @@
 #include <vte/vte.h>
 #define PCRE2_CODE_UNIT_WIDTH 0
 #include <pcre2.h>
+#include <unistd.h>
 
 #include "rgba.h"
 #include "xdg-fm1.h"
@@ -93,6 +94,8 @@ struct _KgxTerminal {
   int         match_id[KGX_TERMINAL_N_LINK_REGEX];
 
   gboolean    popup_is_touch;
+  GPid pid;
+  GFileMonitor *pid_monitor;
 };
 
 
@@ -215,6 +218,61 @@ kgx_terminal_set_property (GObject      *object,
   }
 }
 
+static const char *
+get_current_directory_from_proc (KgxTerminal *self)
+{
+  static const char patterns[][18] = {
+    "/proc/%d/cwd",         /* Linux */
+    "/proc/%d/path/cwd",    /* Solaris >= 10 */
+  };
+  guint i;
+  char *cwd = NULL;
+  char *working_dir = NULL;
+  char cwd_basefile[64];
+  char *cwd_file = NULL;
+
+  if (self->pid == -1)
+    return NULL;
+
+  /* Try to get the working directory using various OS-specific mechanisms */
+  for (i = 0; i < G_N_ELEMENTS (patterns); ++i) {
+
+    /* disable "format not a string literal" error, we know what we are doing */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
+    g_snprintf (cwd_basefile, sizeof (cwd_basefile), patterns[i], self->pid);
+#pragma GCC diagnostic pop
+    cwd_file = g_file_read_link (cwd_basefile, NULL);
+
+    if (cwd_file == NULL)
+      return NULL;
+
+    if ((cwd_file != NULL) && (cwd_file[0] == '/'))
+      return cwd_file;
+
+    /* If that didn't do it, try this hack */
+
+    cwd = g_get_current_dir ();
+    if (cwd != NULL) {
+      /* On Solaris, readlink returns an empty string, but the
+        * link can be used as a directory, including as a target
+        * of chdir().
+        */
+      if (chdir (cwd_file) == 0) {
+        working_dir = g_get_current_dir ();
+        if (chdir (cwd) != 0) {
+          g_warning ("Failed to reset the path.");
+        }
+      }
+      g_free (cwd);
+    }
+
+    if (working_dir)
+      return working_dir;
+  }
+
+  return NULL;
+}
 
 static void
 kgx_terminal_get_property (GObject    *object,
@@ -225,6 +283,7 @@ kgx_terminal_get_property (GObject    *object,
   KgxTerminal *self = KGX_TERMINAL (object);
   const char *uri;
   g_autoptr (GFile) path = NULL;
+  g_autofree const char *procpath = NULL;
 
   switch (property_id) {
     case PROP_SETTINGS:
@@ -235,6 +294,8 @@ kgx_terminal_get_property (GObject    *object,
         path = g_file_new_for_uri (uri);
       } else if ((uri = vte_terminal_get_current_directory_uri (VTE_TERMINAL (self)))) {
         path = g_file_new_for_uri (uri);
+      } else if ((procpath = get_current_directory_from_proc (self))) {
+        path = g_file_new_for_path (procpath);
       }
       g_value_set_object (value, path);
       break;
@@ -847,6 +908,9 @@ kgx_terminal_init (KgxTerminal *self)
 {
   gtk_widget_init_template (GTK_WIDGET (self));
 
+  self->pid = -1;
+  self->pid_monitor = NULL;
+
   gtk_widget_action_set_enabled (GTK_WIDGET (self), "term.open-link", FALSE);
   gtk_widget_action_set_enabled (GTK_WIDGET (self), "term.copy-link", FALSE);
   gtk_widget_action_set_enabled (GTK_WIDGET (self), "term.copy", FALSE);
@@ -885,6 +949,15 @@ kgx_terminal_init (KgxTerminal *self)
 }
 
 
+void
+kgx_terminal_set_pid (KgxTerminal *self,
+                      GPid pid)
+{
+  self->pid = pid;
+  g_object_notify_by_pspec (G_OBJECT (self), pspecs[PROP_PATH]);
+}
+
+
 void
 kgx_terminal_accept_paste (KgxTerminal *self,
                            const char  *text)
diff --git a/src/kgx-terminal.h b/src/kgx-terminal.h
index 406b041..427f8bc 100644
--- a/src/kgx-terminal.h
+++ b/src/kgx-terminal.h
@@ -45,4 +45,7 @@ G_DECLARE_FINAL_TYPE (KgxTerminal, kgx_terminal, KGX, TERMINAL, VteTerminal)
 void kgx_terminal_accept_paste (KgxTerminal *self,
                                 const char  *text);
 
+void kgx_terminal_set_pid (KgxTerminal *self,
+                           GPid pid);
+
 G_END_DECLS
diff --git a/src/kgx-window.c b/src/kgx-window.c
index 15919fa..8203a6d 100644
--- a/src/kgx-window.c
+++ b/src/kgx-window.c
@@ -639,12 +639,17 @@ kgx_window_get_working_dir (KgxWindow *self)
 {
   KgxWindowPrivate *priv;
   GFile *file = NULL;
+  g_autofree const char *current_path = NULL;
 
   g_return_val_if_fail (KGX_IS_WINDOW (self), NULL);
 
   priv = kgx_window_get_instance_private (self);
 
-  g_object_get (priv->pages, "path", &file, NULL);
+  file = kgx_pages_get_current_path (KGX_PAGES (priv->pages));
+
+  if (file == NULL) {
+    g_object_get (priv->pages, "path", &file, NULL);
+  }
 
   return file;
 }
