From: Sergio Costas Rodriguez <sergio.costas@canonical.com>
Date: Mon, 1 Aug 2022 10:36:42 +0200
Subject: [PATCH] Open new tabs in the current folder

Currently, each new tab is opened in the $HOME folder (or in the
folder where the first instance of kgx was launched).

Although all the piping is already in place to allow to open each
new tab in the same folder than the current one, the problem is
that VTE neither returns the current folder's URI, nor emits a
signal when the user changed the current folder.

This is because VTE requires some help from the shell in order to
know in which folder it is at each moment. The shell must emit the
string each time the current folder changes or is set.

    \ESC]6;CURRENT_FOLDER_URI\BELL

This can be achieved by setting PROMPT_COMMAND environment
variable, like in https://gitlab.gnome.org/GNOME/console/-/merge_requests/98,
but it has the problem of being compatible only with BASH.

This MR, instead, achieves this by reading the CWD path in /proc.
This is a trick used in Debian to allow to do this same thing in
Gnome Terminal, as seen in:

https://salsa.debian.org/gnome-team/gnome-terminal/-/blob/debian/master/debian/patches/Provide-fallback-for-reading-current-directory-if-OS.patch

The problem is that there is no way of detecting a change in
the file (a GFileMonitor doesn't seem work), so it requires
changes in order to read the path in the precise moment that
a new page is created.

https://gitlab.gnome.org/GNOME/console/-/merge_requests/99
---
 src/kgx-pages.c      | 21 +++++++++++++++
 src/kgx-pages.h      |  2 ++
 src/kgx-simple-tab.c | 13 ++++++++++
 src/kgx-simple-tab.h |  2 +-
 src/kgx-terminal.c   | 72 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/kgx-terminal.h   |  5 ++++
 src/kgx-window.c     |  6 ++++-
 7 files changed, 119 insertions(+), 2 deletions(-)

diff --git a/src/kgx-pages.c b/src/kgx-pages.c
index 4f94aee..162a694 100644
--- a/src/kgx-pages.c
+++ b/src/kgx-pages.c
@@ -30,6 +30,7 @@
 #include "kgx-config.h"
 #include "kgx-pages.h"
 #include "kgx-tab.h"
+#include "kgx-simple-tab.h"
 #include "kgx-window.h"
 #include "kgx-terminal.h"
 
@@ -896,3 +897,23 @@ kgx_pages_detach_page (KgxPages *self)
   new_view = create_window (ADW_TAB_VIEW (priv->view), self);
   adw_tab_view_transfer_page (ADW_TAB_VIEW (priv->view), page, new_view, 0);
 }
+
+
+
+GFile *
+kgx_pages_get_current_path (KgxPages *self)
+{
+  KgxPagesPrivate *priv;
+  AdwTabPage *current_page;
+  KgxTab *tab;
+
+  g_return_val_if_fail (KGX_IS_PAGES (self), NULL);
+
+  priv = kgx_pages_get_instance_private (self);
+  current_page = priv->action_page;
+
+  if (!current_page)
+    current_page = adw_tab_view_get_selected_page (ADW_TAB_VIEW (priv->view));
+  tab = (KGX_TAB (adw_tab_page_get_child (ADW_TAB_PAGE (current_page))));
+  return kgx_simple_tab_get_current_path (KGX_SIMPLE_TAB (tab));
+}
diff --git a/src/kgx-pages.h b/src/kgx-pages.h
index 11b58b0..6d97077 100644
--- a/src/kgx-pages.h
+++ b/src/kgx-pages.h
@@ -54,4 +54,6 @@ KgxStatus   kgx_pages_current_status (KgxPages   *self);
 void        kgx_pages_close_page          (KgxPages  *self);
 void        kgx_pages_detach_page         (KgxPages  *self);
 
+GFile      *kgx_pages_get_current_path    (KgxPages  *self);
+
 G_END_DECLS
diff --git a/src/kgx-simple-tab.c b/src/kgx-simple-tab.c
index db017ea..4c0d732 100644
--- a/src/kgx-simple-tab.c
+++ b/src/kgx-simple-tab.c
@@ -221,6 +221,7 @@ spawned (VtePty       *pty,
   }
 
   wait_data = g_new0 (WaitData, 1);
+  kgx_terminal_set_pid (KGX_TERMINAL (start_data->self->terminal), pid);
   g_set_weak_pointer (&wait_data->self, start_data->self);
 
   g_child_watch_add (pid, wait_cb, g_steal_pointer (&wait_data));
@@ -364,3 +365,15 @@ kgx_simple_tab_init (KgxSimpleTab *self)
 
   kgx_tab_connect_terminal (KGX_TAB (self), KGX_TERMINAL (self->terminal));
 }
+
+GFile *
+kgx_simple_tab_get_current_path (KgxSimpleTab *self)
+{
+  GFile *current_path;
+  g_return_val_if_fail (KGX_IS_SIMPLE_TAB (self), NULL);
+
+  g_object_get (G_OBJECT (self->terminal),
+                "path",  &current_path,
+                NULL);
+  return current_path;
+}
diff --git a/src/kgx-simple-tab.h b/src/kgx-simple-tab.h
index 4c82052..50968d6 100644
--- a/src/kgx-simple-tab.h
+++ b/src/kgx-simple-tab.h
@@ -53,6 +53,6 @@ struct _KgxSimpleTab
 };
 
 G_DECLARE_FINAL_TYPE (KgxSimpleTab, kgx_simple_tab, KGX, SIMPLE_TAB, KgxTab)
-
+GFile *kgx_simple_tab_get_current_path (KgxSimpleTab *self);
 
 G_END_DECLS
diff --git a/src/kgx-terminal.c b/src/kgx-terminal.c
index 33956e6..b8dc118 100644
--- a/src/kgx-terminal.c
+++ b/src/kgx-terminal.c
@@ -30,6 +30,7 @@
 #include <vte/vte.h>
 #define PCRE2_CODE_UNIT_WIDTH 0
 #include <pcre2.h>
+#include <unistd.h>
 
 #include "rgba.h"
 
@@ -187,6 +188,62 @@ kgx_terminal_set_property (GObject      *object,
   }
 }
 
+static const char *
+get_current_directory_from_proc (KgxTerminal *self)
+{
+  static const char patterns[][18] = {
+    "/proc/%d/cwd",         /* Linux */
+    "/proc/%d/path/cwd",    /* Solaris >= 10 */
+  };
+  guint i;
+  char *cwd = NULL;
+  char *working_dir = NULL;
+  char cwd_basefile[64];
+  char *cwd_file = NULL;
+
+  if (self->pid == -1)
+    return NULL;
+
+  /* Try to get the working directory using various OS-specific mechanisms */
+  for (i = 0; i < G_N_ELEMENTS (patterns); ++i) {
+
+    /* disable "format not a string literal" error, we know what we are doing */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
+    g_snprintf (cwd_basefile, sizeof (cwd_basefile), patterns[i], self->pid);
+#pragma GCC diagnostic pop
+    cwd_file = g_file_read_link (cwd_basefile, NULL);
+
+    if (cwd_file == NULL)
+      return NULL;
+
+    if ((cwd_file != NULL) && (cwd_file[0] == '/'))
+      return cwd_file;
+
+    /* If that didn't do it, try this hack */
+
+    cwd = g_get_current_dir ();
+    if (cwd != NULL) {
+      /* On Solaris, readlink returns an empty string, but the
+        * link can be used as a directory, including as a target
+        * of chdir().
+        */
+      if (chdir (cwd_file) == 0) {
+        working_dir = g_get_current_dir ();
+        if (chdir (cwd) != 0) {
+          g_warning ("Failed to reset the path.");
+        }
+      }
+      g_free (cwd);
+    }
+
+    if (working_dir)
+      return working_dir;
+  }
+
+  return NULL;
+}
+
 static void
 kgx_terminal_get_property (GObject    *object,
                            guint       property_id,
@@ -196,6 +253,7 @@ kgx_terminal_get_property (GObject    *object,
   KgxTerminal *self = KGX_TERMINAL (object);
   const char *uri;
   g_autoptr (GFile) path = NULL;
+  g_autofree const char *procpath = NULL;
 
   switch (property_id) {
     case PROP_THEME:
@@ -206,6 +264,8 @@ kgx_terminal_get_property (GObject    *object,
         path = g_file_new_for_uri (uri);
       } else if ((uri = vte_terminal_get_current_directory_uri (VTE_TERMINAL (self)))) {
         path = g_file_new_for_uri (uri);
+      } else if ((procpath = get_current_directory_from_proc (self))) {
+        path = g_file_new_for_path (procpath);
       }
       g_value_set_object (value, path);
       break;
@@ -683,6 +743,9 @@ kgx_terminal_init (KgxTerminal *self)
   GtkEventController *controller;
   GtkShortcut *shortcut;
 
+  self->pid = -1;
+  self->pid_monitor = NULL;
+
   gesture = gtk_gesture_click_new ();
   gtk_gesture_single_set_button (GTK_GESTURE_SINGLE (gesture), 0);
   g_signal_connect (gesture, "pressed", G_CALLBACK (pressed), self);
@@ -751,6 +814,15 @@ kgx_terminal_init (KgxTerminal *self)
 }
 
 
+void
+kgx_terminal_set_pid (KgxTerminal *self,
+                      GPid pid)
+{
+  self->pid = pid;
+  g_object_notify_by_pspec (G_OBJECT (self), pspecs[PROP_PATH]);
+}
+
+
 void
 kgx_terminal_accept_paste (KgxTerminal *self,
                            const char  *text)
diff --git a/src/kgx-terminal.h b/src/kgx-terminal.h
index 6c689d4..d25d4cd 100644
--- a/src/kgx-terminal.h
+++ b/src/kgx-terminal.h
@@ -105,6 +105,8 @@ struct _KgxTerminal {
   int         match_id[KGX_TERMINAL_N_LINK_REGEX];
 
   gboolean    popup_is_touch;
+  GPid pid;
+  GFileMonitor *pid_monitor;
 };
 
 G_DECLARE_FINAL_TYPE (KgxTerminal, kgx_terminal, KGX, TERMINAL, VteTerminal)
@@ -112,4 +114,7 @@ G_DECLARE_FINAL_TYPE (KgxTerminal, kgx_terminal, KGX, TERMINAL, VteTerminal)
 void kgx_terminal_accept_paste (KgxTerminal *self,
                                 const char  *text);
 
+void kgx_terminal_set_pid (KgxTerminal *self,
+                           GPid pid);
+
 G_END_DECLS
diff --git a/src/kgx-window.c b/src/kgx-window.c
index 9c63bb2..d2e4940 100644
--- a/src/kgx-window.c
+++ b/src/kgx-window.c
@@ -608,10 +608,14 @@ GFile *
 kgx_window_get_working_dir (KgxWindow *self)
 {
   GFile *file = NULL;
+  g_autofree const char *current_path = NULL;
 
   g_return_val_if_fail (KGX_IS_WINDOW (self), NULL);
 
-  g_object_get (self->pages, "path", &file, NULL);
+  file = kgx_pages_get_current_path (KGX_PAGES (self->pages));
+  if (file == NULL) {
+    g_object_get (self->pages, "path", &file, NULL);
+  }
 
   return file;
 }
